/*
 * Copyright (C) 2016 Takuya KOUMURA
 * https://github.com/takuya-koumura/birdsong-recognition
 *
 * This file is part of Birdsong Recognition.
 * 
 * Birdsong Recognition is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * Birdsong Recognition is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Birdsong Recognition.  If not, see <http://www.gnu.org/licenses/>.
 */
package cudnn;
import java.nio.file.Path;

import com.sun.jna.Native;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.ByReference;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.PointerByReference;
import com.sun.jna.win32.StdCallLibrary;
/**
 * JNA Wrapper for library <b>cudnn</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface CudnnLibrary extends StdCallLibrary
{
	public static class Instance
	{
		private Path libraryPath;
		private CudnnLibrary instance;
		
		public Instance(Path libraryPath)
		{
			this.libraryPath = libraryPath.toAbsolutePath();
			instance = (CudnnLibrary)Native.loadLibrary(libraryPath.toString(), CudnnLibrary.class);
		}
		
		public CudnnLibrary get() {return instance;}
	}
	
	/** enum values */
	public static interface cudnnStatus_t {
		/** <i>native declaration : line 83</i> */
		public static final int CUDNN_STATUS_SUCCESS = 0;
		/** <i>native declaration : line 84</i> */
		public static final int CUDNN_STATUS_NOT_INITIALIZED = 1;
		/** <i>native declaration : line 85</i> */
		public static final int CUDNN_STATUS_ALLOC_FAILED = 2;
		/** <i>native declaration : line 86</i> */
		public static final int CUDNN_STATUS_BAD_PARAM = 3;
		/** <i>native declaration : line 87</i> */
		public static final int CUDNN_STATUS_INTERNAL_ERROR = 4;
		/** <i>native declaration : line 88</i> */
		public static final int CUDNN_STATUS_INVALID_VALUE = 5;
		/** <i>native declaration : line 89</i> */
		public static final int CUDNN_STATUS_ARCH_MISMATCH = 6;
		/** <i>native declaration : line 90</i> */
		public static final int CUDNN_STATUS_MAPPING_ERROR = 7;
		/** <i>native declaration : line 91</i> */
		public static final int CUDNN_STATUS_EXECUTION_FAILED = 8;
		/** <i>native declaration : line 92</i> */
		public static final int CUDNN_STATUS_NOT_SUPPORTED = 9;
		/** <i>native declaration : line 93</i> */
		public static final int CUDNN_STATUS_LICENSE_ERROR = 10;
	};
	/** enum values */
	public static interface cudnnDataType_t {
		/** <i>native declaration : line 116</i> */
		public static final int CUDNN_DATA_FLOAT = 0;
		/** <i>native declaration : line 117</i> */
		public static final int CUDNN_DATA_DOUBLE = 1;
	};
	/** enum values */
	public static interface cudnnTensorFormat_t {
		/**
		 * row major (wStride = 1, hStride = w)<br>
		 * <i>native declaration : line 125</i>
		 */
		public static final int CUDNN_TENSOR_NCHW = 0;
		/**
		 * feature maps interleaved ( cStride = 1 )<br>
		 * <i>native declaration : line 126</i>
		 */
		public static final int CUDNN_TENSOR_NHWC = 1;
	};
	/** enum values */
	public static interface cudnnAddMode_t {
		/**
		 * add one image to every feature maps of each input<br>
		 * <i>native declaration : line 217</i>
		 */
		public static final int CUDNN_ADD_IMAGE = 0;
		/** <i>native declaration : line 218</i> */
		public static final int CUDNN_ADD_SAME_HW = 0;
		/**
		 * add a set of feature maps to a batch of inputs : tensorBias has n=1 , same nb feature than Src/dest<br>
		 * <i>native declaration : line 220</i>
		 */
		public static final int CUDNN_ADD_FEATURE_MAP = 1;
		/** <i>native declaration : line 221</i> */
		public static final int CUDNN_ADD_SAME_CHW = 1;
		/**
		 * add a tensor of size 1,c,1,1 to every corresponding point of n,c,h,w input<br>
		 * <i>native declaration : line 223</i>
		 */
		public static final int CUDNN_ADD_SAME_C = 2;
		/**
		 * add 2 tensors with same n,c,h,w<br>
		 * <i>native declaration : line 225</i>
		 */
		public static final int CUDNN_ADD_FULL_TENSOR = 3;
	};
	/** enum values */
	public static interface cudnnConvolutionMode_t {
		/** <i>native declaration : line 258</i> */
		public static final int CUDNN_CONVOLUTION = 0;
		/** <i>native declaration : line 259</i> */
		public static final int CUDNN_CROSS_CORRELATION = 1;
	};
	/** enum values */
	public static interface cudnnConvolutionFwdPreference_t {
		/** <i>native declaration : line 365</i> */
		public static final int CUDNN_CONVOLUTION_FWD_NO_WORKSPACE = 0;
		/** <i>native declaration : line 366</i> */
		public static final int CUDNN_CONVOLUTION_FWD_PREFER_FASTEST = 1;
		/** <i>native declaration : line 367</i> */
		public static final int CUDNN_CONVOLUTION_FWD_SPECIFY_WORKSPACE_LIMIT = 2;
	};
	/** enum values */
	public static interface cudnnConvolutionFwdAlgo_t {
		/** <i>native declaration : line 372</i> */
		public static final int CUDNN_CONVOLUTION_FWD_ALGO_IMPLICIT_GEMM = 0;
		/** <i>native declaration : line 373</i> */
		public static final int CUDNN_CONVOLUTION_FWD_ALGO_IMPLICIT_PRECOMP_GEMM = 1;
		/** <i>native declaration : line 374</i> */
		public static final int CUDNN_CONVOLUTION_FWD_ALGO_GEMM = 2;
		/** <i>native declaration : line 375</i> */
		public static final int CUDNN_CONVOLUTION_FWD_ALGO_DIRECT = 3;
	};
	/** enum values */
	public static interface cudnnSoftmaxAlgorithm_t {
		/**
		 * straightforward implementation<br>
		 * <i>native declaration : line 474</i>
		 */
		public static final int CUDNN_SOFTMAX_FAST = 0;
		/**
		 * subtract max from every point to avoid overflow<br>
		 * <i>native declaration : line 475</i>
		 */
		public static final int CUDNN_SOFTMAX_ACCURATE = 1;
	};
	/** enum values */
	public static interface cudnnSoftmaxMode_t {
		/**
		 * compute the softmax over all C, H, W for each N<br>
		 * <i>native declaration : line 480</i>
		 */
		public static final int CUDNN_SOFTMAX_MODE_INSTANCE = 0;
		/**
		 * compute the softmax over all C for each H, W, N<br>
		 * <i>native declaration : line 481</i>
		 */
		public static final int CUDNN_SOFTMAX_MODE_CHANNEL = 1;
	};
	/** enum values */
	public static interface cudnnPoolingMode_t {
		/** <i>native declaration : line 517</i> */
		public static final int CUDNN_POOLING_MAX = 0;
		/**
		 * count for average includes padded values<br>
		 * <i>native declaration : line 518</i>
		 */
		public static final int CUDNN_POOLING_AVERAGE_COUNT_INCLUDE_PADDING = 1;
		/**
		 * count for average does not include padded values<br>
		 * <i>native declaration : line 519</i>
		 */
		public static final int CUDNN_POOLING_AVERAGE_COUNT_EXCLUDE_PADDING = 2;
	};
	/** enum values */
	public static interface cudnnActivationMode_t {
		/** <i>native declaration : line 611</i> */
		public static final int CUDNN_ACTIVATION_SIGMOID = 0;
		/** <i>native declaration : line 612</i> */
		public static final int CUDNN_ACTIVATION_RELU = 1;
		/** <i>native declaration : line 613</i> */
		public static final int CUDNN_ACTIVATION_TANH = 2;
	};
	public static final int CUDNN_VERSION = (int)2000;
	/**
	 * Original signature : <code>size_t cudnnGetVersion()</code><br>
	 * <i>native declaration : line 76</i>
	 */
//	NativeSize cudnnGetVersion();
	int cudnnGetVersion();
	/**
	 * human-readable error messages<br>
	 * Original signature : <code>char* cudnnGetErrorString(cudnnStatus_t)</code><br>
	 * <i>native declaration : line 97</i>
	 */
	String cudnnGetErrorString(int status);
//	/**
//	 * Original signature : <code>cudnnStatus_t cudnnCreate(cudnnHandle_t*)</code><br>
//	 * <i>native declaration : line 99</i><br>
//	 * @deprecated use the safer method {@link #cudnnCreate(com.sun.jna.ptr.PointerByReference)} instead
//	 */
//	@Deprecated 
//	int cudnnCreate(Pointer handle);
//	/**
//	 * Original signature : <code>cudnnStatus_t cudnnCreate(cudnnHandle_t*)</code><br>
//	 * <i>native declaration : line 99</i>
//	 */
	int cudnnCreate(PointerByReference handle);
//	/**
//	 * Original signature : <code>cudnnStatus_t cudnnDestroy(cudnnHandle_t)</code><br>
//	 * <i>native declaration : line 100</i><br>
//	 * @deprecated use the safer methods {@link #cudnnDestroy(cudnn.CudnnLibrary.cudnnHandle_t)} and {@link #cudnnDestroy(com.sun.jna.Pointer)} instead
//	 */
//	@Deprecated 
//	int cudnnDestroy(Pointer handle);
//	/**
//	 * Original signature : <code>cudnnStatus_t cudnnDestroy(cudnnHandle_t)</code><br>
//	 * <i>native declaration : line 100</i>
//	 */
	int cudnnDestroy(CudnnLibrary.cudnnHandle_t handle);
//	/**
//	 * Original signature : <code>cudnnStatus_t cudnnSetStream(cudnnHandle_t, cudaStream_t)</code><br>
//	 * <i>native declaration : line 101</i><br>
//	 * @deprecated use the safer methods {@link #cudnnSetStream(cudnn.CudnnLibrary.cudnnHandle_t, cudnn.CudnnLibrary.cudaStream_t)} and {@link #cudnnSetStream(com.sun.jna.Pointer, cudnn.CudnnLibrary.cudaStream_t)} instead
//	 */
//	@Deprecated 
//	int cudnnSetStream(Pointer handle, CudnnLibrary.cudaStream_t streamId);
//	/**
//	 * Original signature : <code>cudnnStatus_t cudnnSetStream(cudnnHandle_t, cudaStream_t)</code><br>
//	 * <i>native declaration : line 101</i>
//	 */
//	int cudnnSetStream(CudnnLibrary.cudnnHandle_t handle, CudnnLibrary.cudaStream_t streamId);
//	/**
//	 * Original signature : <code>cudnnStatus_t cudnnGetStream(cudnnHandle_t, cudaStream_t*)</code><br>
//	 * <i>native declaration : line 102</i><br>
//	 * @deprecated use the safer methods {@link #cudnnGetStream(cudnn.CudnnLibrary.cudnnHandle_t, cudnn.CudnnLibrary.cudaStream_t)} and {@link #cudnnGetStream(com.sun.jna.Pointer, cudnn.CudnnLibrary.cudaStream_t)} instead
//	 */
//	@Deprecated 
//	int cudnnGetStream(Pointer handle, CudnnLibrary.cudaStream_t streamId);
//	/**
//	 * Original signature : <code>cudnnStatus_t cudnnGetStream(cudnnHandle_t, cudaStream_t*)</code><br>
//	 * <i>native declaration : line 102</i>
//	 */
//	int cudnnGetStream(CudnnLibrary.cudnnHandle_t handle, CudnnLibrary.cudaStream_t streamId);
//	/**
//	 * Create an instance of a generic Tensor descriptor<br>
//	 * Original signature : <code>cudnnStatus_t cudnnCreateTensorDescriptor(cudnnTensorDescriptor_t*)</code><br>
//	 * <i>native declaration : line 121</i><br>
//	 * @deprecated use the safer method {@link #cudnnCreateTensorDescriptor(com.sun.jna.ptr.PointerByReference)} instead
//	 */
//	@Deprecated 
//	int cudnnCreateTensorDescriptor(Pointer tensorDesc);
	/**
	 * Create an instance of a generic Tensor descriptor<br>
	 * Original signature : <code>cudnnStatus_t cudnnCreateTensorDescriptor(cudnnTensorDescriptor_t*)</code><br>
	 * <i>native declaration : line 121</i>
	 */
	int cudnnCreateTensorDescriptor(PointerByReference tensorDesc);
//	/**
//	 * Original signature : <code>cudnnStatus_t cudnnSetTensor4dDescriptor(cudnnTensorDescriptor_t, cudnnTensorFormat_t, cudnnDataType_t, int, int, int, int)</code><br>
//	 * @param dataType image data type<br>
//	 * @param n number of inputs (batch size)<br>
//	 * @param c number of input feature maps<br>
//	 * @param h height of input section<br>
//	 * @param w width of input section<br>
//	 * <i>native declaration : line 129</i><br>
//	 * @deprecated use the safer methods {@link #cudnnSetTensor4dDescriptor(cudnn.CudnnLibrary.cudnnTensorDescriptor_t, int, int, int, int, int, int)} and {@link #cudnnSetTensor4dDescriptor(com.sun.jna.Pointer, int, int, int, int, int, int)} instead
//	 */
//	@Deprecated 
//	int cudnnSetTensor4dDescriptor(Pointer tensorDesc, int format, int dataType, int n, int c, int h, int w);
	/**
	 * Original signature : <code>cudnnStatus_t cudnnSetTensor4dDescriptor(cudnnTensorDescriptor_t, cudnnTensorFormat_t, cudnnDataType_t, int, int, int, int)</code><br>
	 * @param dataType image data type<br>
	 * @param n number of inputs (batch size)<br>
	 * @param c number of input feature maps<br>
	 * @param h height of input section<br>
	 * @param w width of input section<br>
	 * <i>native declaration : line 129</i>
	 */
	int cudnnSetTensor4dDescriptor(CudnnLibrary.cudnnTensorDescriptor_t tensorDesc, int format, int dataType, int n, int c, int h, int w);
//	/**
//	 * Original signature : <code>cudnnStatus_t cudnnSetTensor4dDescriptorEx(cudnnTensorDescriptor_t, cudnnDataType_t, int, int, int, int, int, int, int, int)</code><br>
//	 * @param dataType image data type<br>
//	 * @param n number of inputs (batch size)<br>
//	 * @param c number of input feature maps<br>
//	 * @param h height of input section<br>
//	 * @param w width of input section<br>
//	 * <i>native declaration : line 139</i><br>
//	 * @deprecated use the safer methods {@link #cudnnSetTensor4dDescriptorEx(cudnn.CudnnLibrary.cudnnTensorDescriptor_t, int, int, int, int, int, int, int, int, int)} and {@link #cudnnSetTensor4dDescriptorEx(com.sun.jna.Pointer, int, int, int, int, int, int, int, int, int)} instead
//	 */
//	@Deprecated 
//	int cudnnSetTensor4dDescriptorEx(Pointer tensorDesc, int dataType, int n, int c, int h, int w, int nStride, int cStride, int hStride, int wStride);
//	/**
//	 * Original signature : <code>cudnnStatus_t cudnnSetTensor4dDescriptorEx(cudnnTensorDescriptor_t, cudnnDataType_t, int, int, int, int, int, int, int, int)</code><br>
//	 * @param dataType image data type<br>
//	 * @param n number of inputs (batch size)<br>
//	 * @param c number of input feature maps<br>
//	 * @param h height of input section<br>
//	 * @param w width of input section<br>
//	 * <i>native declaration : line 139</i>
//	 */
//	int cudnnSetTensor4dDescriptorEx(CudnnLibrary.cudnnTensorDescriptor_t tensorDesc, int dataType, int n, int c, int h, int w, int nStride, int cStride, int hStride, int wStride);
//	/**
//	 * Original signature : <code>cudnnStatus_t cudnnGetTensor4dDescriptor(const cudnnTensorDescriptor_t, cudnnDataType_t*, int*, int*, int*, int*, int*, int*, int*, int*)</code><br>
//	 * @param dataType image data type<br>
//	 * @param n number of inputs (batch size)<br>
//	 * @param c number of input feature maps<br>
//	 * @param h height of input section<br>
//	 * @param w width of input section<br>
//	 * <i>native declaration : line 151</i><br>
//	 * @deprecated use the safer methods {@link #cudnnGetTensor4dDescriptor(cudnn.CudnnLibrary.cudnnTensorDescriptor_t, java.nio.IntByReference, java.nio.IntByReference, java.nio.IntByReference, java.nio.IntByReference, java.nio.IntByReference, java.nio.IntByReference, java.nio.IntByReference, java.nio.IntByReference, java.nio.IntByReference)} and {@link #cudnnGetTensor4dDescriptor(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
//	 */
//	@Deprecated 
//	int cudnnGetTensor4dDescriptor(Pointer tensorDesc, IntByReference dataType, IntByReference n, IntByReference c, IntByReference h, IntByReference w, IntByReference nStride, IntByReference cStride, IntByReference hStride, IntByReference wStride);
	/**
	 * Original signature : <code>cudnnStatus_t cudnnGetTensor4dDescriptor(const cudnnTensorDescriptor_t, cudnnDataType_t*, int*, int*, int*, int*, int*, int*, int*, int*)</code><br>
	 * @param dataType image data type<br>
	 * @param n number of inputs (batch size)<br>
	 * @param c number of input feature maps<br>
	 * @param h height of input section<br>
	 * @param w width of input section<br>
	 * <i>native declaration : line 151</i>
	 */
	int cudnnGetTensor4dDescriptor(CudnnLibrary.cudnnTensorDescriptor_t tensorDesc, IntByReference dataType, IntByReference n, IntByReference c, IntByReference h, IntByReference w, IntByReference nStride, IntByReference cStride, IntByReference hStride, IntByReference wStride);
//	/**
//	 * Original signature : <code>cudnnStatus_t cudnnSetTensorNdDescriptor(cudnnTensorDescriptor_t, cudnnDataType_t, int, const int[], const int[])</code><br>
//	 * <i>native declaration : line 163</i><br>
//	 * @deprecated use the safer methods {@link #cudnnSetTensorNdDescriptor(cudnn.CudnnLibrary.cudnnTensorDescriptor_t, int, int, int[], int[])} and {@link #cudnnSetTensorNdDescriptor(com.sun.jna.Pointer, int, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
//	 */
//	@Deprecated 
//	int cudnnSetTensorNdDescriptor(Pointer tensorDesc, int dataType, int nbDims, IntByReference dimA, IntByReference strideA);
//	/**
//	 * Original signature : <code>cudnnStatus_t cudnnSetTensorNdDescriptor(cudnnTensorDescriptor_t, cudnnDataType_t, int, const int[], const int[])</code><br>
//	 * <i>native declaration : line 163</i>
//	 */
//	int cudnnSetTensorNdDescriptor(CudnnLibrary.cudnnTensorDescriptor_t tensorDesc, int dataType, int nbDims, int dimA[], int strideA[]);
//	/**
//	 * Original signature : <code>cudnnStatus_t cudnnGetTensorNdDescriptor(const cudnnTensorDescriptor_t, int, cudnnDataType_t*, int*, int[], int[])</code><br>
//	 * <i>native declaration : line 170</i><br>
//	 * @deprecated use the safer methods {@link #cudnnGetTensorNdDescriptor(cudnn.CudnnLibrary.cudnnTensorDescriptor_t, int, java.nio.IntByReference, java.nio.IntByReference, java.nio.IntByReference, java.nio.IntByReference)} and {@link #cudnnGetTensorNdDescriptor(com.sun.jna.Pointer, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
//	 */
//	@Deprecated 
//	int cudnnGetTensorNdDescriptor(Pointer tensorDesc, int nbDimsRequested, IntByReference dataType, IntByReference nbDims, IntByReference dimA, IntByReference strideA);
//	/**
//	 * Original signature : <code>cudnnStatus_t cudnnGetTensorNdDescriptor(const cudnnTensorDescriptor_t, int, cudnnDataType_t*, int*, int[], int[])</code><br>
//	 * <i>native declaration : line 170</i>
//	 */
//	int cudnnGetTensorNdDescriptor(CudnnLibrary.cudnnTensorDescriptor_t tensorDesc, int nbDimsRequested, IntByReference dataType, IntByReference nbDims, IntByReference dimA, IntByReference strideA);
//	/**
//	 * Destroy an instance of Tensor4d descriptor<br>
//	 * Original signature : <code>cudnnStatus_t cudnnDestroyTensorDescriptor(cudnnTensorDescriptor_t)</code><br>
//	 * <i>native declaration : line 202</i><br>
//	 * @deprecated use the safer methods {@link #cudnnDestroyTensorDescriptor(cudnn.CudnnLibrary.cudnnTensorDescriptor_t)} and {@link #cudnnDestroyTensorDescriptor(com.sun.jna.Pointer)} instead
//	 */
//	@Deprecated 
//	int cudnnDestroyTensorDescriptor(Pointer tensorDesc);
	/**
	 * Destroy an instance of Tensor4d descriptor<br>
	 * Original signature : <code>cudnnStatus_t cudnnDestroyTensorDescriptor(cudnnTensorDescriptor_t)</code><br>
	 * <i>native declaration : line 202</i>
	 */
	int cudnnDestroyTensorDescriptor(CudnnLibrary.cudnnTensorDescriptor_t tensorDesc);
//	/**
//	 * Tensor layout conversion helper (dest = alpha * src + beta * dest)<br>
//	 * Original signature : <code>cudnnStatus_t cudnnTransformTensor(cudnnHandle_t, const void*, const cudnnTensorDescriptor_t, const void*, const void*, const cudnnTensorDescriptor_t, void*)</code><br>
//	 * <i>native declaration : line 206</i><br>
//	 * @deprecated use the safer methods {@link #cudnnTransformTensor(cudnn.CudnnLibrary.cudnnHandle_t, com.sun.jna.Pointer, cudnn.CudnnLibrary.cudnnTensorDescriptor_t, com.sun.jna.Pointer, com.sun.jna.Pointer, cudnn.CudnnLibrary.cudnnTensorDescriptor_t, com.sun.jna.Pointer)} and {@link #cudnnTransformTensor(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
//	 */
//	@Deprecated 
//	int cudnnTransformTensor(Pointer handle, ByReference alpha, Pointer srcDesc, Pointer srcData, ByReference beta, Pointer destDesc, Pointer destData);
//	/**
//	 * Tensor layout conversion helper (dest = alpha * src + beta * dest)<br>
//	 * Original signature : <code>cudnnStatus_t cudnnTransformTensor(cudnnHandle_t, const void*, const cudnnTensorDescriptor_t, const void*, const void*, const cudnnTensorDescriptor_t, void*)</code><br>
//	 * <i>native declaration : line 206</i>
//	 */
//	int cudnnTransformTensor(CudnnLibrary.cudnnHandle_t handle, ByReference alpha, CudnnLibrary.cudnnTensorDescriptor_t srcDesc, Pointer srcData, ByReference beta, CudnnLibrary.cudnnTensorDescriptor_t destDesc, Pointer destData);
//	/**
//	 * Tensor Bias addition : srcDest = alpha * bias + beta * srcDestDesc<br>
//	 * Original signature : <code>cudnnStatus_t cudnnAddTensor(cudnnHandle_t, cudnnAddMode_t, const void*, const cudnnTensorDescriptor_t, const void*, const void*, cudnnTensorDescriptor_t, void*)</code><br>
//	 * <i>native declaration : line 229</i><br>
//	 * @deprecated use the safer methods {@link #cudnnAddTensor(cudnn.CudnnLibrary.cudnnHandle_t, int, com.sun.jna.Pointer, cudnn.CudnnLibrary.cudnnTensorDescriptor_t, com.sun.jna.Pointer, com.sun.jna.Pointer, cudnn.CudnnLibrary.cudnnTensorDescriptor_t, com.sun.jna.Pointer)} and {@link #cudnnAddTensor(com.sun.jna.Pointer, int, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
//	 */
//	@Deprecated 
//	int cudnnAddTensor(Pointer handle, int mode, ByReference alpha, Pointer biasDesc, Pointer biasData, ByReference beta, Pointer srcDestDesc, Pointer srcDestData);
	/**
	 * Tensor Bias addition : srcDest = alpha * bias + beta * srcDestDesc<br>
	 * Original signature : <code>cudnnStatus_t cudnnAddTensor(cudnnHandle_t, cudnnAddMode_t, const void*, const cudnnTensorDescriptor_t, const void*, const void*, cudnnTensorDescriptor_t, void*)</code><br>
	 * <i>native declaration : line 229</i>
	 */
	int cudnnAddTensor(CudnnLibrary.cudnnHandle_t handle, int mode, ByReference alpha, CudnnLibrary.cudnnTensorDescriptor_t biasDesc, Pointer biasData, ByReference beta, CudnnLibrary.cudnnTensorDescriptor_t srcDestDesc, Pointer srcDestData);
//	/**
//	 * Set all data points of a tensor to a given value : srcDest = value<br>
//	 * Original signature : <code>cudnnStatus_t cudnnSetTensor(cudnnHandle_t, const cudnnTensorDescriptor_t, void*, const void*)</code><br>
//	 * <i>native declaration : line 240</i><br>
//	 * @deprecated use the safer methods {@link #cudnnSetTensor(cudnn.CudnnLibrary.cudnnHandle_t, cudnn.CudnnLibrary.cudnnTensorDescriptor_t, com.sun.jna.Pointer, com.sun.jna.Pointer)} and {@link #cudnnSetTensor(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
//	 */
//	@Deprecated 
//	int cudnnSetTensor(Pointer handle, Pointer srcDestDesc, Pointer srcDestData, Pointer value);
//	/**
//	 * Set all data points of a tensor to a given value : srcDest = value<br>
//	 * Original signature : <code>cudnnStatus_t cudnnSetTensor(cudnnHandle_t, const cudnnTensorDescriptor_t, void*, const void*)</code><br>
//	 * <i>native declaration : line 240</i>
//	 */
//	int cudnnSetTensor(CudnnLibrary.cudnnHandle_t handle, CudnnLibrary.cudnnTensorDescriptor_t srcDestDesc, Pointer srcDestData, Pointer value);
//	/**
//	 * Set all data points of a tensor to a given value : srcDest = alpha * srcDest<br>
//	 * Original signature : <code>cudnnStatus_t cudnnScaleTensor(cudnnHandle_t, const cudnnTensorDescriptor_t, void*, const void*)</code><br>
//	 * <i>native declaration : line 247</i><br>
//	 * @deprecated use the safer methods {@link #cudnnScaleTensor(cudnn.CudnnLibrary.cudnnHandle_t, cudnn.CudnnLibrary.cudnnTensorDescriptor_t, com.sun.jna.Pointer, com.sun.jna.Pointer)} and {@link #cudnnScaleTensor(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
//	 */
//	@Deprecated 
//	int cudnnScaleTensor(Pointer handle, Pointer srcDestDesc, Pointer srcDestData, ByReference alpha);
//	/**
//	 * Set all data points of a tensor to a given value : srcDest = alpha * srcDest<br>
//	 * Original signature : <code>cudnnStatus_t cudnnScaleTensor(cudnnHandle_t, const cudnnTensorDescriptor_t, void*, const void*)</code><br>
//	 * <i>native declaration : line 247</i>
//	 */
//	int cudnnScaleTensor(CudnnLibrary.cudnnHandle_t handle, CudnnLibrary.cudnnTensorDescriptor_t srcDestDesc, Pointer srcDestData, ByReference alpha);
//	/**
//	 * Create an instance of FilterStruct<br>
//	 * Original signature : <code>cudnnStatus_t cudnnCreateFilterDescriptor(cudnnFilterDescriptor_t*)</code><br>
//	 * <i>native declaration : line 264</i><br>
//	 * @deprecated use the safer method {@link #cudnnCreateFilterDescriptor(com.sun.jna.ptr.PointerByReference)} instead
//	 */
//	@Deprecated 
//	int cudnnCreateFilterDescriptor(Pointer filterDesc);
	/**
	 * Create an instance of FilterStruct<br>
	 * Original signature : <code>cudnnStatus_t cudnnCreateFilterDescriptor(cudnnFilterDescriptor_t*)</code><br>
	 * <i>native declaration : line 264</i>
	 */
	int cudnnCreateFilterDescriptor(PointerByReference filterDesc);
//	/**
//	 * Original signature : <code>cudnnStatus_t cudnnSetFilter4dDescriptor(cudnnFilterDescriptor_t, cudnnDataType_t, int, int, int, int)</code><br>
//	 * @param dataType image data type<br>
//	 * @param k number of output feature maps<br>
//	 * @param c number of input feature maps<br>
//	 * @param h height of each input filter<br>
//	 * @param w width of  each input fitler<br>
//	 * <i>native declaration : line 266</i><br>
//	 * @deprecated use the safer methods {@link #cudnnSetFilter4dDescriptor(cudnn.CudnnLibrary.cudnnFilterDescriptor_t, int, int, int, int, int)} and {@link #cudnnSetFilter4dDescriptor(com.sun.jna.Pointer, int, int, int, int, int)} instead
//	 */
//	@Deprecated 
//	int cudnnSetFilter4dDescriptor(Pointer filterDesc, int dataType, int k, int c, int h, int w);
	/**
	 * Original signature : <code>cudnnStatus_t cudnnSetFilter4dDescriptor(cudnnFilterDescriptor_t, cudnnDataType_t, int, int, int, int)</code><br>
	 * @param dataType image data type<br>
	 * @param k number of output feature maps<br>
	 * @param c number of input feature maps<br>
	 * @param h height of each input filter<br>
	 * @param w width of  each input fitler<br>
	 * <i>native declaration : line 266</i>
	 */
	int cudnnSetFilter4dDescriptor(CudnnLibrary.cudnnFilterDescriptor_t filterDesc, int dataType, int k, int c, int h, int w);
//	/**
//	 * Original signature : <code>cudnnStatus_t cudnnGetFilter4dDescriptor(const cudnnFilterDescriptor_t, cudnnDataType_t*, int*, int*, int*, int*)</code><br>
//	 * @param dataType image data type<br>
//	 * @param k number of output feature maps<br>
//	 * @param c number of input feature maps<br>
//	 * @param h height of each input filter<br>
//	 * @param w width of  each input fitler<br>
//	 * <i>native declaration : line 274</i><br>
//	 * @deprecated use the safer methods {@link #cudnnGetFilter4dDescriptor(cudnn.CudnnLibrary.cudnnFilterDescriptor_t, java.nio.IntByReference, java.nio.IntByReference, java.nio.IntByReference, java.nio.IntByReference, java.nio.IntByReference)} and {@link #cudnnGetFilter4dDescriptor(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
//	 */
//	@Deprecated 
//	int cudnnGetFilter4dDescriptor(Pointer filterDesc, IntByReference dataType, IntByReference k, IntByReference c, IntByReference h, IntByReference w);
//	/**
//	 * Original signature : <code>cudnnStatus_t cudnnGetFilter4dDescriptor(const cudnnFilterDescriptor_t, cudnnDataType_t*, int*, int*, int*, int*)</code><br>
//	 * @param dataType image data type<br>
//	 * @param k number of output feature maps<br>
//	 * @param c number of input feature maps<br>
//	 * @param h height of each input filter<br>
//	 * @param w width of  each input fitler<br>
//	 * <i>native declaration : line 274</i>
//	 */
//	int cudnnGetFilter4dDescriptor(CudnnLibrary.cudnnFilterDescriptor_t filterDesc, IntByReference dataType, IntByReference k, IntByReference c, IntByReference h, IntByReference w);
//	/**
//	 * Original signature : <code>cudnnStatus_t cudnnSetFilterNdDescriptor(cudnnFilterDescriptor_t, cudnnDataType_t, int, const int[])</code><br>
//	 * @param dataType image data type<br>
//	 * <i>native declaration : line 282</i><br>
//	 * @deprecated use the safer methods {@link #cudnnSetFilterNdDescriptor(cudnn.CudnnLibrary.cudnnFilterDescriptor_t, int, int, int[])} and {@link #cudnnSetFilterNdDescriptor(com.sun.jna.Pointer, int, int, com.sun.jna.ptr.IntByReference)} instead
//	 */
//	@Deprecated 
//	int cudnnSetFilterNdDescriptor(Pointer filterDesc, int dataType, int nbDims, IntByReference filterDimA);
//	/**
//	 * Original signature : <code>cudnnStatus_t cudnnSetFilterNdDescriptor(cudnnFilterDescriptor_t, cudnnDataType_t, int, const int[])</code><br>
//	 * @param dataType image data type<br>
//	 * <i>native declaration : line 282</i>
//	 */
//	int cudnnSetFilterNdDescriptor(CudnnLibrary.cudnnFilterDescriptor_t filterDesc, int dataType, int nbDims, int filterDimA[]);
//	/**
//	 * Original signature : <code>cudnnStatus_t cudnnGetFilterNdDescriptor(const cudnnFilterDescriptor_t, int, cudnnDataType_t*, int*, int[])</code><br>
//	 * @param dataType image data type<br>
//	 * <i>native declaration : line 288</i><br>
//	 * @deprecated use the safer methods {@link #cudnnGetFilterNdDescriptor(cudnn.CudnnLibrary.cudnnFilterDescriptor_t, int, java.nio.IntByReference, java.nio.IntByReference, java.nio.IntByReference)} and {@link #cudnnGetFilterNdDescriptor(com.sun.jna.Pointer, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
//	 */
//	@Deprecated 
//	int cudnnGetFilterNdDescriptor(Pointer filterDesc, int nbDimsRequested, IntByReference dataType, IntByReference nbDims, IntByReference filterDimA);
//	/**
//	 * Original signature : <code>cudnnStatus_t cudnnGetFilterNdDescriptor(const cudnnFilterDescriptor_t, int, cudnnDataType_t*, int*, int[])</code><br>
//	 * @param dataType image data type<br>
//	 * <i>native declaration : line 288</i>
//	 */
//	int cudnnGetFilterNdDescriptor(CudnnLibrary.cudnnFilterDescriptor_t filterDesc, int nbDimsRequested, IntByReference dataType, IntByReference nbDims, IntByReference filterDimA);
//	/**
//	 * Original signature : <code>cudnnStatus_t cudnnDestroyFilterDescriptor(cudnnFilterDescriptor_t)</code><br>
//	 * <i>native declaration : line 295</i><br>
//	 * @deprecated use the safer methods {@link #cudnnDestroyFilterDescriptor(cudnn.CudnnLibrary.cudnnFilterDescriptor_t)} and {@link #cudnnDestroyFilterDescriptor(com.sun.jna.Pointer)} instead
//	 */
//	@Deprecated 
//	int cudnnDestroyFilterDescriptor(Pointer filterDesc);
	/**
	 * Original signature : <code>cudnnStatus_t cudnnDestroyFilterDescriptor(cudnnFilterDescriptor_t)</code><br>
	 * <i>native declaration : line 295</i>
	 */
	int cudnnDestroyFilterDescriptor(CudnnLibrary.cudnnFilterDescriptor_t filterDesc);
//	/**
//	 * Create an instance of convolution descriptor<br>
//	 * Original signature : <code>cudnnStatus_t cudnnCreateConvolutionDescriptor(cudnnConvolutionDescriptor_t*)</code><br>
//	 * <i>native declaration : line 298</i><br>
//	 * @deprecated use the safer method {@link #cudnnCreateConvolutionDescriptor(com.sun.jna.ptr.PointerByReference)} instead
//	 */
//	@Deprecated 
//	int cudnnCreateConvolutionDescriptor(Pointer convDesc);
	/**
	 * Create an instance of convolution descriptor<br>
	 * Original signature : <code>cudnnStatus_t cudnnCreateConvolutionDescriptor(cudnnConvolutionDescriptor_t*)</code><br>
	 * <i>native declaration : line 298</i>
	 */
	int cudnnCreateConvolutionDescriptor(PointerByReference convDesc);
//	/**
//	 * Original signature : <code>cudnnStatus_t cudnnSetConvolution2dDescriptor(cudnnConvolutionDescriptor_t, int, int, int, int, int, int, cudnnConvolutionMode_t)</code><br>
//	 * @param pad_h zero-padding height<br>
//	 * @param pad_w zero-padding width<br>
//	 * @param u vertical filter stride<br>
//	 * @param v horizontal filter stride<br>
//	 * @param upscalex upscale the input in x-direction<br>
//	 * @param upscaley upscale the input in y-direction<br>
//	 * <i>native declaration : line 300</i><br>
//	 * @deprecated use the safer methods {@link #cudnnSetConvolution2dDescriptor(cudnn.CudnnLibrary.cudnnConvolutionDescriptor_t, int, int, int, int, int, int, int)} and {@link #cudnnSetConvolution2dDescriptor(com.sun.jna.Pointer, int, int, int, int, int, int, int)} instead
//	 */
//	@Deprecated 
//	int cudnnSetConvolution2dDescriptor(Pointer convDesc, int pad_h, int pad_w, int u, int v, int upscalex, int upscaley, int mode);
	/**
	 * Original signature : <code>cudnnStatus_t cudnnSetConvolution2dDescriptor(cudnnConvolutionDescriptor_t, int, int, int, int, int, int, cudnnConvolutionMode_t)</code><br>
	 * @param pad_h zero-padding height<br>
	 * @param pad_w zero-padding width<br>
	 * @param u vertical filter stride<br>
	 * @param v horizontal filter stride<br>
	 * @param upscalex upscale the input in x-direction<br>
	 * @param upscaley upscale the input in y-direction<br>
	 * <i>native declaration : line 300</i>
	 */
	int cudnnSetConvolution2dDescriptor(CudnnLibrary.cudnnConvolutionDescriptor_t convDesc, int pad_h, int pad_w, int u, int v, int upscalex, int upscaley, int mode);
//	/**
//	 * Original signature : <code>cudnnStatus_t cudnnGetConvolution2dDescriptor(const cudnnConvolutionDescriptor_t, int*, int*, int*, int*, int*, int*, cudnnConvolutionMode_t*)</code><br>
//	 * @param pad_h zero-padding height<br>
//	 * @param pad_w zero-padding width<br>
//	 * @param u vertical filter stride<br>
//	 * @param v horizontal filter stride<br>
//	 * @param upscalex upscale the input in x-direction<br>
//	 * @param upscaley upscale the input in y-direction<br>
//	 * <i>native declaration : line 311</i><br>
//	 * @deprecated use the safer methods {@link #cudnnGetConvolution2dDescriptor(cudnn.CudnnLibrary.cudnnConvolutionDescriptor_t, java.nio.IntByReference, java.nio.IntByReference, java.nio.IntByReference, java.nio.IntByReference, java.nio.IntByReference, java.nio.IntByReference, java.nio.IntByReference)} and {@link #cudnnGetConvolution2dDescriptor(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
//	 */
//	@Deprecated 
//	int cudnnGetConvolution2dDescriptor(Pointer convDesc, IntByReference pad_h, IntByReference pad_w, IntByReference u, IntByReference v, IntByReference upscalex, IntByReference upscaley, IntByReference mode);
//	/**
//	 * Original signature : <code>cudnnStatus_t cudnnGetConvolution2dDescriptor(const cudnnConvolutionDescriptor_t, int*, int*, int*, int*, int*, int*, cudnnConvolutionMode_t*)</code><br>
//	 * @param pad_h zero-padding height<br>
//	 * @param pad_w zero-padding width<br>
//	 * @param u vertical filter stride<br>
//	 * @param v horizontal filter stride<br>
//	 * @param upscalex upscale the input in x-direction<br>
//	 * @param upscaley upscale the input in y-direction<br>
//	 * <i>native declaration : line 311</i>
//	 */
//	int cudnnGetConvolution2dDescriptor(CudnnLibrary.cudnnConvolutionDescriptor_t convDesc, IntByReference pad_h, IntByReference pad_w, IntByReference u, IntByReference v, IntByReference upscalex, IntByReference upscaley, IntByReference mode);
//	/**
//	 * Helper function to return the dimensions of the output tensor given a convolution descriptor<br>
//	 * Original signature : <code>cudnnStatus_t cudnnGetConvolution2dForwardOutputDim(const cudnnConvolutionDescriptor_t, const cudnnTensorDescriptor_t, const cudnnFilterDescriptor_t, int*, int*, int*, int*)</code><br>
//	 * <i>native declaration : line 322</i><br>
//	 * @deprecated use the safer methods {@link #cudnnGetConvolution2dForwardOutputDim(cudnn.CudnnLibrary.cudnnConvolutionDescriptor_t, cudnn.CudnnLibrary.cudnnTensorDescriptor_t, cudnn.CudnnLibrary.cudnnFilterDescriptor_t, java.nio.IntByReference, java.nio.IntByReference, java.nio.IntByReference, java.nio.IntByReference)} and {@link #cudnnGetConvolution2dForwardOutputDim(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
//	 */
//	@Deprecated 
//	int cudnnGetConvolution2dForwardOutputDim(Pointer convDesc, Pointer inputTensorDesc, Pointer filterDesc, IntByReference n, IntByReference c, IntByReference h, IntByReference w);
	/**
	 * Helper function to return the dimensions of the output tensor given a convolution descriptor<br>
	 * Original signature : <code>cudnnStatus_t cudnnGetConvolution2dForwardOutputDim(const cudnnConvolutionDescriptor_t, const cudnnTensorDescriptor_t, const cudnnFilterDescriptor_t, int*, int*, int*, int*)</code><br>
	 * <i>native declaration : line 322</i>
	 */
	int cudnnGetConvolution2dForwardOutputDim(CudnnLibrary.cudnnConvolutionDescriptor_t convDesc, CudnnLibrary.cudnnTensorDescriptor_t inputTensorDesc, CudnnLibrary.cudnnFilterDescriptor_t filterDesc, IntByReference n, IntByReference c, IntByReference h, IntByReference w);
//	/**
//	 * Original signature : <code>cudnnStatus_t cudnnSetConvolutionNdDescriptor(cudnnConvolutionDescriptor_t, int, const int[], const int[], const int[], cudnnConvolutionMode_t)</code><br>
//	 * @param arrayLength nbDims-2 size<br>
//	 * <i>native declaration : line 332</i><br>
//	 * @deprecated use the safer methods {@link #cudnnSetConvolutionNdDescriptor(cudnn.CudnnLibrary.cudnnConvolutionDescriptor_t, int, int[], int[], int[], int)} and {@link #cudnnSetConvolutionNdDescriptor(com.sun.jna.Pointer, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, int)} instead
//	 */
//	@Deprecated 
//	int cudnnSetConvolutionNdDescriptor(Pointer convDesc, int arrayLength, IntByReference padA, IntByReference filterStrideA, IntByReference upscaleA, int mode);
//	/**
//	 * Original signature : <code>cudnnStatus_t cudnnSetConvolutionNdDescriptor(cudnnConvolutionDescriptor_t, int, const int[], const int[], const int[], cudnnConvolutionMode_t)</code><br>
//	 * @param arrayLength nbDims-2 size<br>
//	 * <i>native declaration : line 332</i>
//	 */
//	int cudnnSetConvolutionNdDescriptor(CudnnLibrary.cudnnConvolutionDescriptor_t convDesc, int arrayLength, int padA[], int filterStrideA[], int upscaleA[], int mode);
//	/**
//	 * Original signature : <code>cudnnStatus_t cudnnGetConvolutionNdDescriptor(const cudnnConvolutionDescriptor_t, int, int*, int[], int[], int[], cudnnConvolutionMode_t*)</code><br>
//	 * <i>native declaration : line 340</i><br>
//	 * @deprecated use the safer methods {@link #cudnnGetConvolutionNdDescriptor(cudnn.CudnnLibrary.cudnnConvolutionDescriptor_t, int, java.nio.IntByReference, java.nio.IntByReference, java.nio.IntByReference, java.nio.IntByReference, java.nio.IntByReference)} and {@link #cudnnGetConvolutionNdDescriptor(com.sun.jna.Pointer, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
//	 */
//	@Deprecated 
//	int cudnnGetConvolutionNdDescriptor(Pointer convDesc, int arrayLengthRequested, IntByReference arrayLength, IntByReference padA, IntByReference strideA, IntByReference upscaleA, IntByReference mode);
//	/**
//	 * Original signature : <code>cudnnStatus_t cudnnGetConvolutionNdDescriptor(const cudnnConvolutionDescriptor_t, int, int*, int[], int[], int[], cudnnConvolutionMode_t*)</code><br>
//	 * <i>native declaration : line 340</i>
//	 */
//	int cudnnGetConvolutionNdDescriptor(CudnnLibrary.cudnnConvolutionDescriptor_t convDesc, int arrayLengthRequested, IntByReference arrayLength, IntByReference padA, IntByReference strideA, IntByReference upscaleA, IntByReference mode);
//	/**
//	 * Helper function to return the dimensions of the output tensor given a convolution descriptor<br>
//	 * Original signature : <code>cudnnStatus_t cudnnGetConvolutionNdForwardOutputDim(const cudnnConvolutionDescriptor_t, const cudnnTensorDescriptor_t, const cudnnFilterDescriptor_t, int, int[])</code><br>
//	 * <i>native declaration : line 351</i><br>
//	 * @deprecated use the safer methods {@link #cudnnGetConvolutionNdForwardOutputDim(cudnn.CudnnLibrary.cudnnConvolutionDescriptor_t, cudnn.CudnnLibrary.cudnnTensorDescriptor_t, cudnn.CudnnLibrary.cudnnFilterDescriptor_t, int, java.nio.IntByReference)} and {@link #cudnnGetConvolutionNdForwardOutputDim(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.sun.jna.ptr.IntByReference)} instead
//	 */
//	@Deprecated 
//	int cudnnGetConvolutionNdForwardOutputDim(Pointer convDesc, Pointer inputTensorDesc, Pointer filterDesc, int nbDims, IntByReference tensorOuputDimA);
//	/**
//	 * Helper function to return the dimensions of the output tensor given a convolution descriptor<br>
//	 * Original signature : <code>cudnnStatus_t cudnnGetConvolutionNdForwardOutputDim(const cudnnConvolutionDescriptor_t, const cudnnTensorDescriptor_t, const cudnnFilterDescriptor_t, int, int[])</code><br>
//	 * <i>native declaration : line 351</i>
//	 */
//	int cudnnGetConvolutionNdForwardOutputDim(CudnnLibrary.cudnnConvolutionDescriptor_t convDesc, CudnnLibrary.cudnnTensorDescriptor_t inputTensorDesc, CudnnLibrary.cudnnFilterDescriptor_t filterDesc, int nbDims, IntByReference tensorOuputDimA);
//	/**
//	 * Destroy an instance of convolution descriptor<br>
//	 * Original signature : <code>cudnnStatus_t cudnnDestroyConvolutionDescriptor(cudnnConvolutionDescriptor_t)</code><br>
//	 * <i>native declaration : line 359</i><br>
//	 * @deprecated use the safer methods {@link #cudnnDestroyConvolutionDescriptor(cudnn.CudnnLibrary.cudnnConvolutionDescriptor_t)} and {@link #cudnnDestroyConvolutionDescriptor(com.sun.jna.Pointer)} instead
//	 */
//	@Deprecated 
//	int cudnnDestroyConvolutionDescriptor(Pointer convDesc);
	/**
	 * Destroy an instance of convolution descriptor<br>
	 * Original signature : <code>cudnnStatus_t cudnnDestroyConvolutionDescriptor(cudnnConvolutionDescriptor_t)</code><br>
	 * <i>native declaration : line 359</i>
	 */
	int cudnnDestroyConvolutionDescriptor(CudnnLibrary.cudnnConvolutionDescriptor_t convDesc);
//	/**
//	 * Original signature : <code>cudnnStatus_t cudnnGetConvolutionForwardAlgorithm(cudnnHandle_t, const cudnnTensorDescriptor_t, const cudnnFilterDescriptor_t, const cudnnConvolutionDescriptor_t, const cudnnTensorDescriptor_t, cudnnConvolutionFwdPreference_t, size_t, cudnnConvolutionFwdAlgo_t*)</code><br>
//	 * <i>native declaration : line 379</i><br>
//	 * @deprecated use the safer methods {@link #cudnnGetConvolutionForwardAlgorithm(cudnn.CudnnLibrary.cudnnHandle_t, cudnn.CudnnLibrary.cudnnTensorDescriptor_t, cudnn.CudnnLibrary.cudnnFilterDescriptor_t, cudnn.CudnnLibrary.cudnnConvolutionDescriptor_t, cudnn.CudnnLibrary.cudnnTensorDescriptor_t, int, com.ochafik.lang.jnaerator.runtime.NativeSize, java.nio.IntByReference)} and {@link #cudnnGetConvolutionForwardAlgorithm(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.ochafik.lang.jnaerator.runtime.NativeSize, com.sun.jna.ptr.IntByReference)} instead
//	 */
//	@Deprecated 
//	int cudnnGetConvolutionForwardAlgorithm(Pointer handle, Pointer srcDesc, Pointer filterDesc, Pointer convDesc, Pointer destDesc, int preference, NativeSize memoryLimitInbytes, IntByReference algo);
	/**
	 * Original signature : <code>cudnnStatus_t cudnnGetConvolutionForwardAlgorithm(cudnnHandle_t, const cudnnTensorDescriptor_t, const cudnnFilterDescriptor_t, const cudnnConvolutionDescriptor_t, const cudnnTensorDescriptor_t, cudnnConvolutionFwdPreference_t, size_t, cudnnConvolutionFwdAlgo_t*)</code><br>
	 * <i>native declaration : line 379</i>
	 */
	int cudnnGetConvolutionForwardAlgorithm(CudnnLibrary.cudnnHandle_t handle, CudnnLibrary.cudnnTensorDescriptor_t srcDesc, CudnnLibrary.cudnnFilterDescriptor_t filterDesc, CudnnLibrary.cudnnConvolutionDescriptor_t convDesc, CudnnLibrary.cudnnTensorDescriptor_t destDesc, int preference, int memoryLimitInbytes, IntByReference algo);
//	/**
//	 * Helper function to return the minimum size of the workspace to be passed to the convolution given an algo<br>
//	 * Original signature : <code>cudnnStatus_t cudnnGetConvolutionForwardWorkspaceSize(cudnnHandle_t, const cudnnTensorDescriptor_t, const cudnnFilterDescriptor_t, const cudnnConvolutionDescriptor_t, const cudnnTensorDescriptor_t, cudnnConvolutionFwdAlgo_t, size_t*)</code><br>
//	 * <i>native declaration : line 394</i><br>
//	 * @deprecated use the safer methods {@link #cudnnGetConvolutionForwardWorkspaceSize(cudnn.CudnnLibrary.cudnnHandle_t, cudnn.CudnnLibrary.cudnnTensorDescriptor_t, cudnn.CudnnLibrary.cudnnFilterDescriptor_t, cudnn.CudnnLibrary.cudnnConvolutionDescriptor_t, cudnn.CudnnLibrary.cudnnTensorDescriptor_t, int, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference)} and {@link #cudnnGetConvolutionForwardWorkspaceSize(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference)} instead
//	 */
//	@Deprecated 
//	int cudnnGetConvolutionForwardWorkspaceSize(Pointer handle, Pointer srcDesc, Pointer filterDesc, Pointer convDesc, Pointer destDesc, int algo, NativeSizeByReference sizeInBytes);
	/**
	 * Helper function to return the minimum size of the workspace to be passed to the convolution given an algo<br>
	 * Original signature : <code>cudnnStatus_t cudnnGetConvolutionForwardWorkspaceSize(cudnnHandle_t, const cudnnTensorDescriptor_t, const cudnnFilterDescriptor_t, const cudnnConvolutionDescriptor_t, const cudnnTensorDescriptor_t, cudnnConvolutionFwdAlgo_t, size_t*)</code><br>
	 * <i>native declaration : line 394</i>
	 */
	int cudnnGetConvolutionForwardWorkspaceSize(CudnnLibrary.cudnnHandle_t handle, CudnnLibrary.cudnnTensorDescriptor_t srcDesc, CudnnLibrary.cudnnFilterDescriptor_t filterDesc, CudnnLibrary.cudnnConvolutionDescriptor_t convDesc, CudnnLibrary.cudnnTensorDescriptor_t destDesc, int algo, IntByReference sizeInBytes);
//	/**
//	 * Function to perform the forward multiconvolution<br>
//	 * Original signature : <code>cudnnStatus_t cudnnConvolutionForward(cudnnHandle_t, const void*, const cudnnTensorDescriptor_t, const void*, const cudnnFilterDescriptor_t, const void*, const cudnnConvolutionDescriptor_t, cudnnConvolutionFwdAlgo_t, void*, size_t, const void*, const cudnnTensorDescriptor_t, void*)</code><br>
//	 * <i>native declaration : line 407</i><br>
//	 * @deprecated use the safer methods {@link #cudnnConvolutionForward(cudnn.CudnnLibrary.cudnnHandle_t, com.sun.jna.Pointer, cudnn.CudnnLibrary.cudnnTensorDescriptor_t, com.sun.jna.Pointer, cudnn.CudnnLibrary.cudnnFilterDescriptor_t, com.sun.jna.Pointer, cudnn.CudnnLibrary.cudnnConvolutionDescriptor_t, int, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize, com.sun.jna.Pointer, cudnn.CudnnLibrary.cudnnTensorDescriptor_t, com.sun.jna.Pointer)} and {@link #cudnnConvolutionForward(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
//	 */
//	@Deprecated 
//	int cudnnConvolutionForward(Pointer handle, ByReference alpha, Pointer srcDesc, Pointer srcData, Pointer filterDesc, Pointer filterData, Pointer convDesc, int algo, Pointer workSpace, NativeSize workSpaceSizeInBytes, ByReference beta, Pointer destDesc, Pointer destData);
	/**
	 * Function to perform the forward multiconvolution<br>
	 * Original signature : <code>cudnnStatus_t cudnnConvolutionForward(cudnnHandle_t, const void*, const cudnnTensorDescriptor_t, const void*, const cudnnFilterDescriptor_t, const void*, const cudnnConvolutionDescriptor_t, cudnnConvolutionFwdAlgo_t, void*, size_t, const void*, const cudnnTensorDescriptor_t, void*)</code><br>
	 * <i>native declaration : line 407</i>
	 */
	int cudnnConvolutionForward(CudnnLibrary.cudnnHandle_t handle, ByReference alpha, CudnnLibrary.cudnnTensorDescriptor_t srcDesc, Pointer srcData, CudnnLibrary.cudnnFilterDescriptor_t filterDesc, Pointer filterData, CudnnLibrary.cudnnConvolutionDescriptor_t convDesc, int algo, Pointer workSpace, int workSpaceSizeInBytes, ByReference beta, CudnnLibrary.cudnnTensorDescriptor_t destDesc, Pointer destData);
//	/**
//	 * Functions to perform the backward multiconvolution<br>
//	 * Original signature : <code>cudnnStatus_t cudnnConvolutionBackwardBias(cudnnHandle_t, const void*, const cudnnTensorDescriptor_t, const void*, const void*, const cudnnTensorDescriptor_t, void*)</code><br>
//	 * <i>native declaration : line 423</i><br>
//	 * @deprecated use the safer methods {@link #cudnnConvolutionBackwardBias(cudnn.CudnnLibrary.cudnnHandle_t, com.sun.jna.Pointer, cudnn.CudnnLibrary.cudnnTensorDescriptor_t, com.sun.jna.Pointer, com.sun.jna.Pointer, cudnn.CudnnLibrary.cudnnTensorDescriptor_t, com.sun.jna.Pointer)} and {@link #cudnnConvolutionBackwardBias(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
//	 */
//	@Deprecated 
//	int cudnnConvolutionBackwardBias(Pointer handle, ByReference alpha, Pointer srcDesc, Pointer srcData, ByReference beta, Pointer destDesc, Pointer destData);
	/**
	 * Functions to perform the backward multiconvolution<br>
	 * Original signature : <code>cudnnStatus_t cudnnConvolutionBackwardBias(cudnnHandle_t, const void*, const cudnnTensorDescriptor_t, const void*, const void*, const cudnnTensorDescriptor_t, void*)</code><br>
	 * <i>native declaration : line 423</i>
	 */
	int cudnnConvolutionBackwardBias(CudnnLibrary.cudnnHandle_t handle, ByReference alpha, CudnnLibrary.cudnnTensorDescriptor_t srcDesc, Pointer srcData, ByReference beta, CudnnLibrary.cudnnTensorDescriptor_t destDesc, Pointer destData);
//	/**
//	 * Original signature : <code>cudnnStatus_t cudnnConvolutionBackwardFilter(cudnnHandle_t, const void*, const cudnnTensorDescriptor_t, const void*, const cudnnTensorDescriptor_t, const void*, const cudnnConvolutionDescriptor_t, const void*, const cudnnFilterDescriptor_t, void*)</code><br>
//	 * <i>native declaration : line 434</i><br>
//	 * @deprecated use the safer methods {@link #cudnnConvolutionBackwardFilter(cudnn.CudnnLibrary.cudnnHandle_t, com.sun.jna.Pointer, cudnn.CudnnLibrary.cudnnTensorDescriptor_t, com.sun.jna.Pointer, cudnn.CudnnLibrary.cudnnTensorDescriptor_t, com.sun.jna.Pointer, cudnn.CudnnLibrary.cudnnConvolutionDescriptor_t, com.sun.jna.Pointer, cudnn.CudnnLibrary.cudnnFilterDescriptor_t, com.sun.jna.Pointer)} and {@link #cudnnConvolutionBackwardFilter(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
//	 */
//	@Deprecated 
//	int cudnnConvolutionBackwardFilter(Pointer handle, ByReference alpha, Pointer srcDesc, Pointer srcData, Pointer diffDesc, Pointer diffData, Pointer convDesc, ByReference beta, Pointer gradDesc, Pointer gradData);
	/**
	 * Original signature : <code>cudnnStatus_t cudnnConvolutionBackwardFilter(cudnnHandle_t, const void*, const cudnnTensorDescriptor_t, const void*, const cudnnTensorDescriptor_t, const void*, const cudnnConvolutionDescriptor_t, const void*, const cudnnFilterDescriptor_t, void*)</code><br>
	 * <i>native declaration : line 434</i>
	 */
	int cudnnConvolutionBackwardFilter(CudnnLibrary.cudnnHandle_t handle, ByReference alpha, CudnnLibrary.cudnnTensorDescriptor_t srcDesc, Pointer srcData, CudnnLibrary.cudnnTensorDescriptor_t diffDesc, Pointer diffData, CudnnLibrary.cudnnConvolutionDescriptor_t convDesc, ByReference beta, CudnnLibrary.cudnnFilterDescriptor_t gradDesc, Pointer gradData);
//	/**
//	 * Original signature : <code>cudnnStatus_t cudnnConvolutionBackwardData(cudnnHandle_t, const void*, const cudnnFilterDescriptor_t, const void*, const cudnnTensorDescriptor_t, const void*, const cudnnConvolutionDescriptor_t, const void*, const cudnnTensorDescriptor_t, void*)</code><br>
//	 * <i>native declaration : line 447</i><br>
//	 * @deprecated use the safer methods {@link #cudnnConvolutionBackwardData(cudnn.CudnnLibrary.cudnnHandle_t, com.sun.jna.Pointer, cudnn.CudnnLibrary.cudnnFilterDescriptor_t, com.sun.jna.Pointer, cudnn.CudnnLibrary.cudnnTensorDescriptor_t, com.sun.jna.Pointer, cudnn.CudnnLibrary.cudnnConvolutionDescriptor_t, com.sun.jna.Pointer, cudnn.CudnnLibrary.cudnnTensorDescriptor_t, com.sun.jna.Pointer)} and {@link #cudnnConvolutionBackwardData(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
//	 */
//	@Deprecated 
//	int cudnnConvolutionBackwardData(Pointer handle, ByReference alpha, Pointer filterDesc, Pointer filterData, Pointer diffDesc, Pointer diffData, Pointer convDesc, ByReference beta, Pointer gradDesc, Pointer gradData);
	/**
	 * Original signature : <code>cudnnStatus_t cudnnConvolutionBackwardData(cudnnHandle_t, const void*, const cudnnFilterDescriptor_t, const void*, const cudnnTensorDescriptor_t, const void*, const cudnnConvolutionDescriptor_t, const void*, const cudnnTensorDescriptor_t, void*)</code><br>
	 * <i>native declaration : line 447</i>
	 */
	int cudnnConvolutionBackwardData(CudnnLibrary.cudnnHandle_t handle, ByReference alpha, CudnnLibrary.cudnnFilterDescriptor_t filterDesc, Pointer filterData, CudnnLibrary.cudnnTensorDescriptor_t diffDesc, Pointer diffData, CudnnLibrary.cudnnConvolutionDescriptor_t convDesc, ByReference beta, CudnnLibrary.cudnnTensorDescriptor_t gradDesc, Pointer gradData);
//	/**
//	 * Original signature : <code>cudnnStatus_t cudnnIm2Col(cudnnHandle_t, const void*, const cudnnTensorDescriptor_t, const void*, const cudnnFilterDescriptor_t, const cudnnConvolutionDescriptor_t, void*)</code><br>
//	 * <i>native declaration : line 459</i><br>
//	 * @deprecated use the safer methods {@link #cudnnIm2Col(cudnn.CudnnLibrary.cudnnHandle_t, com.sun.jna.Pointer, cudnn.CudnnLibrary.cudnnTensorDescriptor_t, com.sun.jna.Pointer, cudnn.CudnnLibrary.cudnnFilterDescriptor_t, cudnn.CudnnLibrary.cudnnConvolutionDescriptor_t, com.sun.jna.Pointer)} and {@link #cudnnIm2Col(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
//	 */
//	@Deprecated 
//	int cudnnIm2Col(Pointer handle, ByReference alpha, Pointer srcDesc, Pointer srcData, Pointer filterDesc, Pointer convDesc, Pointer colBuffer);
//	/**
//	 * Original signature : <code>cudnnStatus_t cudnnIm2Col(cudnnHandle_t, const void*, const cudnnTensorDescriptor_t, const void*, const cudnnFilterDescriptor_t, const cudnnConvolutionDescriptor_t, void*)</code><br>
//	 * <i>native declaration : line 459</i>
//	 */
//	int cudnnIm2Col(CudnnLibrary.cudnnHandle_t handle, ByReference alpha, CudnnLibrary.cudnnTensorDescriptor_t srcDesc, Pointer srcData, CudnnLibrary.cudnnFilterDescriptor_t filterDesc, CudnnLibrary.cudnnConvolutionDescriptor_t convDesc, Pointer colBuffer);
//	/**
//	 * Function to perform forward softmax<br>
//	 * Original signature : <code>cudnnStatus_t cudnnSoftmaxForward(cudnnHandle_t, cudnnSoftmaxAlgorithm_t, cudnnSoftmaxMode_t, const void*, const cudnnTensorDescriptor_t, const void*, const void*, const cudnnTensorDescriptor_t, void*)</code><br>
//	 * <i>native declaration : line 487</i><br>
//	 * @deprecated use the safer methods {@link #cudnnSoftmaxForward(cudnn.CudnnLibrary.cudnnHandle_t, int, int, com.sun.jna.Pointer, cudnn.CudnnLibrary.cudnnTensorDescriptor_t, com.sun.jna.Pointer, com.sun.jna.Pointer, cudnn.CudnnLibrary.cudnnTensorDescriptor_t, com.sun.jna.Pointer)} and {@link #cudnnSoftmaxForward(com.sun.jna.Pointer, int, int, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
//	 */
//	@Deprecated 
//	int cudnnSoftmaxForward(Pointer handle, int algorithm, int mode, ByReference alpha, Pointer srcDesc, Pointer srcData, ByReference beta, Pointer destDesc, Pointer destData);
	/**
	 * Function to perform forward softmax<br>
	 * Original signature : <code>cudnnStatus_t cudnnSoftmaxForward(cudnnHandle_t, cudnnSoftmaxAlgorithm_t, cudnnSoftmaxMode_t, const void*, const cudnnTensorDescriptor_t, const void*, const void*, const cudnnTensorDescriptor_t, void*)</code><br>
	 * <i>native declaration : line 487</i>
	 */
	int cudnnSoftmaxForward(CudnnLibrary.cudnnHandle_t handle, int algorithm, int mode, ByReference alpha, CudnnLibrary.cudnnTensorDescriptor_t srcDesc, Pointer srcData, ByReference beta, CudnnLibrary.cudnnTensorDescriptor_t destDesc, Pointer destData);
//	/**
//	 * Function to perform backward softmax<br>
//	 * Original signature : <code>cudnnStatus_t cudnnSoftmaxBackward(cudnnHandle_t, cudnnSoftmaxAlgorithm_t, cudnnSoftmaxMode_t, const void*, const cudnnTensorDescriptor_t, const void*, const cudnnTensorDescriptor_t, const void*, const void*, const cudnnTensorDescriptor_t, void*)</code><br>
//	 * <i>native declaration : line 499</i><br>
//	 * @deprecated use the safer methods {@link #cudnnSoftmaxBackward(cudnn.CudnnLibrary.cudnnHandle_t, int, int, com.sun.jna.Pointer, cudnn.CudnnLibrary.cudnnTensorDescriptor_t, com.sun.jna.Pointer, cudnn.CudnnLibrary.cudnnTensorDescriptor_t, com.sun.jna.Pointer, com.sun.jna.Pointer, cudnn.CudnnLibrary.cudnnTensorDescriptor_t, com.sun.jna.Pointer)} and {@link #cudnnSoftmaxBackward(com.sun.jna.Pointer, int, int, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
//	 */
//	@Deprecated 
//	int cudnnSoftmaxBackward(Pointer handle, int algorithm, int mode, ByReference alpha, Pointer srcDesc, Pointer srcData, Pointer srcDiffDesc, Pointer srcDiffData, ByReference beta, Pointer destDiffDesc, Pointer destDiffData);
//	/**
//	 * Function to perform backward softmax<br>
//	 * Original signature : <code>cudnnStatus_t cudnnSoftmaxBackward(cudnnHandle_t, cudnnSoftmaxAlgorithm_t, cudnnSoftmaxMode_t, const void*, const cudnnTensorDescriptor_t, const void*, const cudnnTensorDescriptor_t, const void*, const void*, const cudnnTensorDescriptor_t, void*)</code><br>
//	 * <i>native declaration : line 499</i>
//	 */
//	int cudnnSoftmaxBackward(CudnnLibrary.cudnnHandle_t handle, int algorithm, int mode, ByReference alpha, CudnnLibrary.cudnnTensorDescriptor_t srcDesc, Pointer srcData, CudnnLibrary.cudnnTensorDescriptor_t srcDiffDesc, Pointer srcDiffData, ByReference beta, CudnnLibrary.cudnnTensorDescriptor_t destDiffDesc, Pointer destDiffData);
//	/**
//	 * Create an instance of pooling descriptor<br>
//	 * Original signature : <code>cudnnStatus_t cudnnCreatePoolingDescriptor(cudnnPoolingDescriptor_t*)</code><br>
//	 * <i>native declaration : line 523</i><br>
//	 * @deprecated use the safer method {@link #cudnnCreatePoolingDescriptor(com.sun.jna.ptr.PointerByReference)} instead
//	 */
//	@Deprecated 
//	int cudnnCreatePoolingDescriptor(Pointer poolingDesc);
	/**
	 * Create an instance of pooling descriptor<br>
	 * Original signature : <code>cudnnStatus_t cudnnCreatePoolingDescriptor(cudnnPoolingDescriptor_t*)</code><br>
	 * <i>native declaration : line 523</i>
	 */
	int cudnnCreatePoolingDescriptor(PointerByReference poolingDesc);
//	/**
//	 * Original signature : <code>cudnnStatus_t cudnnSetPooling2dDescriptor(cudnnPoolingDescriptor_t, cudnnPoolingMode_t, int, int, int, int, int, int)</code><br>
//	 * <i>native declaration : line 525</i><br>
//	 * @deprecated use the safer methods {@link #cudnnSetPooling2dDescriptor(cudnn.CudnnLibrary.cudnnPoolingDescriptor_t, int, int, int, int, int, int, int)} and {@link #cudnnSetPooling2dDescriptor(com.sun.jna.Pointer, int, int, int, int, int, int, int)} instead
//	 */
//	@Deprecated 
//	int cudnnSetPooling2dDescriptor(Pointer poolingDesc, int mode, int windowHeight, int windowWidth, int verticalPadding, int horizontalPadding, int verticalStride, int horizontalStride);
	/**
	 * Original signature : <code>cudnnStatus_t cudnnSetPooling2dDescriptor(cudnnPoolingDescriptor_t, cudnnPoolingMode_t, int, int, int, int, int, int)</code><br>
	 * <i>native declaration : line 525</i>
	 */
	int cudnnSetPooling2dDescriptor(CudnnLibrary.cudnnPoolingDescriptor_t poolingDesc, int mode, int windowHeight, int windowWidth, int verticalPadding, int horizontalPadding, int verticalStride, int horizontalStride);
//	/**
//	 * Original signature : <code>cudnnStatus_t cudnnGetPooling2dDescriptor(const cudnnPoolingDescriptor_t, cudnnPoolingMode_t*, int*, int*, int*, int*, int*, int*)</code><br>
//	 * <i>native declaration : line 535</i><br>
//	 * @deprecated use the safer methods {@link #cudnnGetPooling2dDescriptor(cudnn.CudnnLibrary.cudnnPoolingDescriptor_t, java.nio.IntByReference, java.nio.IntByReference, java.nio.IntByReference, java.nio.IntByReference, java.nio.IntByReference, java.nio.IntByReference, java.nio.IntByReference)} and {@link #cudnnGetPooling2dDescriptor(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
//	 */
//	@Deprecated 
//	int cudnnGetPooling2dDescriptor(Pointer poolingDesc, IntByReference mode, IntByReference windowHeight, IntByReference windowWidth, IntByReference verticalPadding, IntByReference horizontalPadding, IntByReference verticalStride, IntByReference horizontalStride);
	/**
	 * Original signature : <code>cudnnStatus_t cudnnGetPooling2dDescriptor(const cudnnPoolingDescriptor_t, cudnnPoolingMode_t*, int*, int*, int*, int*, int*, int*)</code><br>
	 * <i>native declaration : line 535</i>
	 */
	int cudnnGetPooling2dDescriptor(CudnnLibrary.cudnnPoolingDescriptor_t poolingDesc, IntByReference mode, IntByReference windowHeight, IntByReference windowWidth, IntByReference verticalPadding, IntByReference horizontalPadding, IntByReference verticalStride, IntByReference horizontalStride);
//	/**
//	 * Original signature : <code>cudnnStatus_t cudnnSetPoolingNdDescriptor(cudnnPoolingDescriptor_t, const cudnnPoolingMode_t, int, const int[], const int[], const int[])</code><br>
//	 * <i>native declaration : line 545</i><br>
//	 * @deprecated use the safer methods {@link #cudnnSetPoolingNdDescriptor(cudnn.CudnnLibrary.cudnnPoolingDescriptor_t, int, int, int[], int[], int[])} and {@link #cudnnSetPoolingNdDescriptor(com.sun.jna.Pointer, int, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
//	 */
//	@Deprecated 
//	int cudnnSetPoolingNdDescriptor(Pointer poolingDesc, int mode, int nbDims, IntByReference windowDimA, IntByReference paddingA, IntByReference strideA);
//	/**
//	 * Original signature : <code>cudnnStatus_t cudnnSetPoolingNdDescriptor(cudnnPoolingDescriptor_t, const cudnnPoolingMode_t, int, const int[], const int[], const int[])</code><br>
//	 * <i>native declaration : line 545</i>
//	 */
//	int cudnnSetPoolingNdDescriptor(CudnnLibrary.cudnnPoolingDescriptor_t poolingDesc, int mode, int nbDims, int windowDimA[], int paddingA[], int strideA[]);
//	/**
//	 * Original signature : <code>cudnnStatus_t cudnnGetPoolingNdDescriptor(const cudnnPoolingDescriptor_t, const int, cudnnPoolingMode_t*, int*, int[], int[], int[])</code><br>
//	 * <i>native declaration : line 553</i><br>
//	 * @deprecated use the safer methods {@link #cudnnGetPoolingNdDescriptor(cudnn.CudnnLibrary.cudnnPoolingDescriptor_t, int, java.nio.IntByReference, java.nio.IntByReference, java.nio.IntByReference, java.nio.IntByReference, java.nio.IntByReference)} and {@link #cudnnGetPoolingNdDescriptor(com.sun.jna.Pointer, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
//	 */
//	@Deprecated 
//	int cudnnGetPoolingNdDescriptor(Pointer poolingDesc, int nbDimsRequested, IntByReference mode, IntByReference nbDims, IntByReference windowDimA, IntByReference paddingA, IntByReference strideA);
//	/**
//	 * Original signature : <code>cudnnStatus_t cudnnGetPoolingNdDescriptor(const cudnnPoolingDescriptor_t, const int, cudnnPoolingMode_t*, int*, int[], int[], int[])</code><br>
//	 * <i>native declaration : line 553</i>
//	 */
//	int cudnnGetPoolingNdDescriptor(CudnnLibrary.cudnnPoolingDescriptor_t poolingDesc, int nbDimsRequested, IntByReference mode, IntByReference nbDims, IntByReference windowDimA, IntByReference paddingA, IntByReference strideA);
//	/**
//	 * Original signature : <code>cudnnStatus_t cudnnGetPoolingNdForwardOutputDim(const cudnnPoolingDescriptor_t, const cudnnTensorDescriptor_t, int, int[])</code><br>
//	 * <i>native declaration : line 562</i><br>
//	 * @deprecated use the safer methods {@link #cudnnGetPoolingNdForwardOutputDim(cudnn.CudnnLibrary.cudnnPoolingDescriptor_t, cudnn.CudnnLibrary.cudnnTensorDescriptor_t, int, java.nio.IntByReference)} and {@link #cudnnGetPoolingNdForwardOutputDim(com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.sun.jna.ptr.IntByReference)} instead
//	 */
//	@Deprecated 
//	int cudnnGetPoolingNdForwardOutputDim(Pointer poolingDesc, Pointer inputTensorDesc, int nbDims, IntByReference outputTensorDimA);
//	/**
//	 * Original signature : <code>cudnnStatus_t cudnnGetPoolingNdForwardOutputDim(const cudnnPoolingDescriptor_t, const cudnnTensorDescriptor_t, int, int[])</code><br>
//	 * <i>native declaration : line 562</i>
//	 */
//	int cudnnGetPoolingNdForwardOutputDim(CudnnLibrary.cudnnPoolingDescriptor_t poolingDesc, CudnnLibrary.cudnnTensorDescriptor_t inputTensorDesc, int nbDims, IntByReference outputTensorDimA);
//	/**
//	 * Original signature : <code>cudnnStatus_t cudnnGetPooling2dForwardOutputDim(const cudnnPoolingDescriptor_t, const cudnnTensorDescriptor_t, int*, int*, int*, int*)</code><br>
//	 * <i>native declaration : line 567</i><br>
//	 * @deprecated use the safer methods {@link #cudnnGetPooling2dForwardOutputDim(cudnn.CudnnLibrary.cudnnPoolingDescriptor_t, cudnn.CudnnLibrary.cudnnTensorDescriptor_t, java.nio.IntByReference, java.nio.IntByReference, java.nio.IntByReference, java.nio.IntByReference)} and {@link #cudnnGetPooling2dForwardOutputDim(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
//	 */
//	@Deprecated 
//	int cudnnGetPooling2dForwardOutputDim(Pointer poolingDesc, Pointer inputTensorDesc, IntByReference outN, IntByReference outC, IntByReference outH, IntByReference outW);
//	/**
//	 * Original signature : <code>cudnnStatus_t cudnnGetPooling2dForwardOutputDim(const cudnnPoolingDescriptor_t, const cudnnTensorDescriptor_t, int*, int*, int*, int*)</code><br>
//	 * <i>native declaration : line 567</i>
//	 */
//	int cudnnGetPooling2dForwardOutputDim(CudnnLibrary.cudnnPoolingDescriptor_t poolingDesc, CudnnLibrary.cudnnTensorDescriptor_t inputTensorDesc, IntByReference outN, IntByReference outC, IntByReference outH, IntByReference outW);
//	/**
//	 * Destroy an instance of pooling descriptor<br>
//	 * Original signature : <code>cudnnStatus_t cudnnDestroyPoolingDescriptor(cudnnPoolingDescriptor_t)</code><br>
//	 * <i>native declaration : line 576</i><br>
//	 * @deprecated use the safer methods {@link #cudnnDestroyPoolingDescriptor(cudnn.CudnnLibrary.cudnnPoolingDescriptor_t)} and {@link #cudnnDestroyPoolingDescriptor(com.sun.jna.Pointer)} instead
//	 */
//	@Deprecated 
//	int cudnnDestroyPoolingDescriptor(Pointer poolingDesc);
	/**
	 * Destroy an instance of pooling descriptor<br>
	 * Original signature : <code>cudnnStatus_t cudnnDestroyPoolingDescriptor(cudnnPoolingDescriptor_t)</code><br>
	 * <i>native declaration : line 576</i>
	 */
	int cudnnDestroyPoolingDescriptor(CudnnLibrary.cudnnPoolingDescriptor_t poolingDesc);
//	/**
//	 * Function to perform forward pooling<br>
//	 * Original signature : <code>cudnnStatus_t cudnnPoolingForward(cudnnHandle_t, const cudnnPoolingDescriptor_t, const void*, const cudnnTensorDescriptor_t, const void*, const void*, const cudnnTensorDescriptor_t, void*)</code><br>
//	 * <i>native declaration : line 581</i><br>
//	 * @deprecated use the safer methods {@link #cudnnPoolingForward(cudnn.CudnnLibrary.cudnnHandle_t, cudnn.CudnnLibrary.cudnnPoolingDescriptor_t, com.sun.jna.Pointer, cudnn.CudnnLibrary.cudnnTensorDescriptor_t, com.sun.jna.Pointer, com.sun.jna.Pointer, cudnn.CudnnLibrary.cudnnTensorDescriptor_t, com.sun.jna.Pointer)} and {@link #cudnnPoolingForward(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
//	 */
//	@Deprecated 
//	int cudnnPoolingForward(Pointer handle, Pointer poolingDesc, ByReference alpha, Pointer srcDesc, Pointer srcData, ByReference beta, Pointer destDesc, Pointer destData);
	/**
	 * Function to perform forward pooling<br>
	 * Original signature : <code>cudnnStatus_t cudnnPoolingForward(cudnnHandle_t, const cudnnPoolingDescriptor_t, const void*, const cudnnTensorDescriptor_t, const void*, const void*, const cudnnTensorDescriptor_t, void*)</code><br>
	 * <i>native declaration : line 581</i>
	 */
	int cudnnPoolingForward(CudnnLibrary.cudnnHandle_t handle, CudnnLibrary.cudnnPoolingDescriptor_t poolingDesc, ByReference alpha, CudnnLibrary.cudnnTensorDescriptor_t srcDesc, Pointer srcData, ByReference beta, CudnnLibrary.cudnnTensorDescriptor_t destDesc, Pointer destData);
//	/**
//	 * Function to perform backward pooling<br>
//	 * Original signature : <code>cudnnStatus_t cudnnPoolingBackward(cudnnHandle_t, const cudnnPoolingDescriptor_t, const void*, const cudnnTensorDescriptor_t, const void*, const cudnnTensorDescriptor_t, const void*, const cudnnTensorDescriptor_t, const void*, const void*, const cudnnTensorDescriptor_t, void*)</code><br>
//	 * <i>native declaration : line 592</i><br>
//	 * @deprecated use the safer methods {@link #cudnnPoolingBackward(cudnn.CudnnLibrary.cudnnHandle_t, cudnn.CudnnLibrary.cudnnPoolingDescriptor_t, com.sun.jna.Pointer, cudnn.CudnnLibrary.cudnnTensorDescriptor_t, com.sun.jna.Pointer, cudnn.CudnnLibrary.cudnnTensorDescriptor_t, com.sun.jna.Pointer, cudnn.CudnnLibrary.cudnnTensorDescriptor_t, com.sun.jna.Pointer, com.sun.jna.Pointer, cudnn.CudnnLibrary.cudnnTensorDescriptor_t, com.sun.jna.Pointer)} and {@link #cudnnPoolingBackward(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
//	 */
//	@Deprecated 
//	int cudnnPoolingBackward(Pointer handle, Pointer poolingDesc, ByReference alpha, Pointer srcDesc, Pointer srcData, Pointer srcDiffDesc, Pointer srcDiffData, Pointer destDesc, Pointer destData, ByReference beta, Pointer destDiffDesc, Pointer destDiffData);
	/**
	 * Function to perform backward pooling<br>
	 * Original signature : <code>cudnnStatus_t cudnnPoolingBackward(cudnnHandle_t, const cudnnPoolingDescriptor_t, const void*, const cudnnTensorDescriptor_t, const void*, const cudnnTensorDescriptor_t, const void*, const cudnnTensorDescriptor_t, const void*, const void*, const cudnnTensorDescriptor_t, void*)</code><br>
	 * <i>native declaration : line 592</i>
	 */
	int cudnnPoolingBackward(CudnnLibrary.cudnnHandle_t handle, CudnnLibrary.cudnnPoolingDescriptor_t poolingDesc, ByReference alpha, CudnnLibrary.cudnnTensorDescriptor_t srcDesc, Pointer srcData, CudnnLibrary.cudnnTensorDescriptor_t srcDiffDesc, Pointer srcDiffData, CudnnLibrary.cudnnTensorDescriptor_t destDesc, Pointer destData, ByReference beta, CudnnLibrary.cudnnTensorDescriptor_t destDiffDesc, Pointer destDiffData);
//	/**
//	 * Function to perform forward activation<br>
//	 * Original signature : <code>cudnnStatus_t cudnnActivationForward(cudnnHandle_t, cudnnActivationMode_t, const void*, const cudnnTensorDescriptor_t, const void*, const void*, const cudnnTensorDescriptor_t, void*)</code><br>
//	 * <i>native declaration : line 619</i><br>
//	 * @deprecated use the safer methods {@link #cudnnActivationForward(cudnn.CudnnLibrary.cudnnHandle_t, int, com.sun.jna.Pointer, cudnn.CudnnLibrary.cudnnTensorDescriptor_t, com.sun.jna.Pointer, com.sun.jna.Pointer, cudnn.CudnnLibrary.cudnnTensorDescriptor_t, com.sun.jna.Pointer)} and {@link #cudnnActivationForward(com.sun.jna.Pointer, int, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
//	 */
//	@Deprecated 
//	int cudnnActivationForward(Pointer handle, int mode, ByReference alpha, Pointer srcDesc, Pointer srcData, ByReference beta, Pointer destDesc, Pointer destData);
	/**
	 * Function to perform forward activation<br>
	 * Original signature : <code>cudnnStatus_t cudnnActivationForward(cudnnHandle_t, cudnnActivationMode_t, const void*, const cudnnTensorDescriptor_t, const void*, const void*, const cudnnTensorDescriptor_t, void*)</code><br>
	 * <i>native declaration : line 619</i>
	 */
	int cudnnActivationForward(CudnnLibrary.cudnnHandle_t handle, int mode, ByReference alpha, CudnnLibrary.cudnnTensorDescriptor_t srcDesc, Pointer srcData, ByReference beta, CudnnLibrary.cudnnTensorDescriptor_t destDesc, Pointer destData);
//	/**
//	 * Function to perform backward activation<br>
//	 * Original signature : <code>cudnnStatus_t cudnnActivationBackward(cudnnHandle_t, cudnnActivationMode_t, const void*, const cudnnTensorDescriptor_t, const void*, const cudnnTensorDescriptor_t, const void*, const cudnnTensorDescriptor_t, const void*, const void*, const cudnnTensorDescriptor_t, void*)</code><br>
//	 * <i>native declaration : line 630</i><br>
//	 * @deprecated use the safer methods {@link #cudnnActivationBackward(cudnn.CudnnLibrary.cudnnHandle_t, int, com.sun.jna.Pointer, cudnn.CudnnLibrary.cudnnTensorDescriptor_t, com.sun.jna.Pointer, cudnn.CudnnLibrary.cudnnTensorDescriptor_t, com.sun.jna.Pointer, cudnn.CudnnLibrary.cudnnTensorDescriptor_t, com.sun.jna.Pointer, com.sun.jna.Pointer, cudnn.CudnnLibrary.cudnnTensorDescriptor_t, com.sun.jna.Pointer)} and {@link #cudnnActivationBackward(com.sun.jna.Pointer, int, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
//	 */
//	@Deprecated 
//	int cudnnActivationBackward(Pointer handle, int mode, ByReference alpha, Pointer srcDesc, Pointer srcData, Pointer srcDiffDesc, Pointer srcDiffData, Pointer destDesc, Pointer destData, ByReference beta, Pointer destDiffDesc, Pointer destDiffData);
	/**
	 * Function to perform backward activation<br>
	 * Original signature : <code>cudnnStatus_t cudnnActivationBackward(cudnnHandle_t, cudnnActivationMode_t, const void*, const cudnnTensorDescriptor_t, const void*, const cudnnTensorDescriptor_t, const void*, const cudnnTensorDescriptor_t, const void*, const void*, const cudnnTensorDescriptor_t, void*)</code><br>
	 * <i>native declaration : line 630</i>
	 */
	int cudnnActivationBackward(CudnnLibrary.cudnnHandle_t handle, int mode, ByReference alpha, CudnnLibrary.cudnnTensorDescriptor_t srcDesc, Pointer srcData, CudnnLibrary.cudnnTensorDescriptor_t srcDiffDesc, Pointer srcDiffData, CudnnLibrary.cudnnTensorDescriptor_t destDesc, Pointer destData, ByReference beta, CudnnLibrary.cudnnTensorDescriptor_t destDiffDesc, Pointer destDiffData);
//	public static class cudaStream_t extends PointerType {
//		public cudaStream_t(Pointer address) {
//			super(address);
//		}
//		public cudaStream_t() {
//			super();
//		}
//	};
	public static class cudnnTensorDescriptor_t extends PointerType {
		public cudnnTensorDescriptor_t(Pointer address) {
			super(address);
		}
		public cudnnTensorDescriptor_t() {
			super();
		}
		
		/**
		 * Original signature : <code>cudnnStatus_t cudnnSetTensor4dDescriptor(cudnnTensorDescriptor_t, cudnnTensorFormat_t, cudnnDataType_t, int, int, int, int)</code><br>
		 * @param dataType image data type<br>
		 * @param n number of inputs (batch size)<br>
		 * @param c number of input feature maps<br>
		 * @param h height of input section<br>
		 * @param w width of input section<br>
		 * @throws CudnnException 
		 */
		public void setTensor4dDescriptor(Cudnn cudnn, int format, int dataType, int n, int c, int h, int w) throws CudnnException
		{
			cudnn.checkError(cudnn.getLibrary().get().cudnnSetTensor4dDescriptor(this, format, dataType, n, c, h, w));
		}
		
		/**
		 * Destroy an instance of Tensor4d descriptor<br>
		 * Original signature : <code>cudnnStatus_t cudnnDestroyTensorDescriptor(cudnnTensorDescriptor_t)</code><br>
		 * <i>native declaration : line 202</i>
		 * @throws CudnnException 
		 */
		public void destroy(Cudnn cudnn) throws CudnnException
		{
			cudnn.checkError(cudnn.getLibrary().get().cudnnDestroyTensorDescriptor(this));
		}
	};
	public static class cudnnConvolutionDescriptor_t extends PointerType {
		public cudnnConvolutionDescriptor_t(Pointer address) {
			super(address);
		}
		public cudnnConvolutionDescriptor_t() {
			super();
		}
		
		/**
		 * Destroy an instance of convolution descriptor<br>
		 * Original signature : <code>cudnnStatus_t cudnnDestroyConvolutionDescriptor(cudnnConvolutionDescriptor_t)</code><br>
		 * <i>native declaration : line 359</i>
		 * @throws CudnnException 
		 */
		public void destroy(Cudnn cudnn) throws CudnnException
		{
			cudnn.checkError(cudnn.getLibrary().get().cudnnDestroyConvolutionDescriptor(this));
		}

		/**
		 * Original signature : <code>cudnnStatus_t cudnnSetConvolution2dDescriptor(cudnnConvolutionDescriptor_t, int, int, int, int, int, int, cudnnConvolutionMode_t)</code><br>
		 * @param pad_h zero-padding height<br>
		 * @param pad_w zero-padding width<br>
		 * @param u vertical filter stride<br>
		 * @param v horizontal filter stride<br>
		 * @param upscalex upscale the input in x-direction<br>
		 * @param upscaley upscale the input in y-direction<br>
		 * <i>native declaration : line 300</i>
		 * @throws CudnnException 
		 */
		public void setConvolution2dDescriptor(Cudnn cudnn, int pad_h, int pad_w, int u, int v, int upscalex, int upscaley, int mode) throws CudnnException
		{
			cudnn.checkError(cudnn.getLibrary().get().cudnnSetConvolution2dDescriptor(this, pad_h, pad_w, u, v, upscalex, upscaley, mode));
		}
	};
	public static class cudnnFilterDescriptor_t extends PointerType {
		public cudnnFilterDescriptor_t(Pointer address) {
			super(address);
		}
		public cudnnFilterDescriptor_t() {
			super();
		}
		
		/**
		 * Original signature : <code>cudnnStatus_t cudnnDestroyFilterDescriptor(cudnnFilterDescriptor_t)</code><br>
		 * <i>native declaration : line 295</i>
		 */
		public void destroy(Cudnn cudnn) throws CudnnException
		{
			cudnn.checkError(cudnn.getLibrary().get().cudnnDestroyFilterDescriptor(this));
		}

		/**
		 * Original signature : <code>cudnnStatus_t cudnnSetFilter4dDescriptor(cudnnFilterDescriptor_t, cudnnDataType_t, int, int, int, int)</code><br>
		 * @param dataType image data type<br>
		 * @param k number of output feature maps<br>
		 * @param c number of input feature maps<br>
		 * @param h height of each input filter<br>
		 * @param w width of  each input fitler<br>
		 * <i>native declaration : line 266</i>
		 * @throws CudnnException 
		 */
		public void setFilter4dDescriptor(Cudnn cudnn, int dataType, int k, int c, int h, int w) throws CudnnException
		{
			cudnn.checkError(cudnn.getLibrary().get().cudnnSetFilter4dDescriptor(this, dataType, k, c, h, w));
		}
	};
	public static class cudnnPoolingDescriptor_t extends PointerType {
		public cudnnPoolingDescriptor_t(Pointer address) {
			super(address);
		}
		public cudnnPoolingDescriptor_t() {
			super();
		}
		/**
		 * Original signature : <code>cudnnStatus_t cudnnSetPooling2dDescriptor(cudnnPoolingDescriptor_t, cudnnPoolingMode_t, int, int, int, int, int, int)</code><br>
		 * <i>native declaration : line 525</i>
		 * @throws CudnnException 
		 */
		public void setPooling2dDescriptor(Cudnn cudnn, int mode, int windowHeight, int windowWidth, int verticalPadding, int horizontalPadding, int verticalStride, int horizontalStride) throws CudnnException
		{
			cudnn.checkError(cudnn.getLibrary().get().cudnnSetPooling2dDescriptor(this, mode, windowHeight, windowWidth, verticalPadding, horizontalPadding, verticalStride, horizontalStride));
		}
		
		/**
		 * Destroy an instance of pooling descriptor<br>
		 * Original signature : <code>cudnnStatus_t cudnnDestroyPoolingDescriptor(cudnnPoolingDescriptor_t)</code><br>
		 * <i>native declaration : line 576</i>
		 * @throws CudnnException 
		 */
		public void destroy(Cudnn cudnn) throws CudnnException
		{
			cudnn.checkError(cudnn.getLibrary().get().cudnnDestroyPoolingDescriptor(this));
		}
	};
	public static class cudnnHandle_t extends PointerType {
		public cudnnHandle_t(Pointer address) {
			super(address);
		}
		public cudnnHandle_t() {
			super();
		}
	};
	
	//v3
	public static interface cudnnConvolutionBwdFilterPreference_t
	{
		public static final int CUDNN_CONVOLUTION_BWD_FILTER_NO_WORKSPACE            = 0;
		public static final int CUDNN_CONVOLUTION_BWD_FILTER_PREFER_FASTEST          = 1;
		public static final int CUDNN_CONVOLUTION_BWD_FILTER_SPECIFY_WORKSPACE_LIMIT = 2;
	}
	
	public static interface cudnnConvolutionBwdFilterAlgo_t
	{
		public static final int CUDNN_CONVOLUTION_BWD_FILTER_ALGO_0         = 0;  // non-deterministic
		public static final int CUDNN_CONVOLUTION_BWD_FILTER_ALGO_1         = 1;
		public static final int CUDNN_CONVOLUTION_BWD_FILTER_ALGO_FFT       = 2;
	}

	public static interface cudnnConvolutionBwdDataAlgo_t
	{
		public static final int CUDNN_CONVOLUTION_BWD_DATA_ALGO_0         = 0; // non-deterministic
		public static final int CUDNN_CONVOLUTION_BWD_DATA_ALGO_1         = 1;    
		public static final int CUDNN_CONVOLUTION_BWD_DATA_ALGO_FFT       = 2;
	}
	
	public int cudnnGetConvolutionBackwardFilterAlgorithm(
			cudnnHandle_t handle,
			cudnnTensorDescriptor_t srcDesc,
			cudnnTensorDescriptor_t diffDesc,
			cudnnConvolutionDescriptor_t convDesc,
			cudnnFilterDescriptor_t gradDesc,
			int preference,
			int memoryLimitInbytes,
			IntByReference algo);
	
	public int cudnnConvolutionBackwardFilter_v3(
			cudnnHandle_t handle,
			ByReference alpha,
			cudnnTensorDescriptor_t srcDesc,
			Pointer srcData,
			cudnnTensorDescriptor_t diffDesc,
			Pointer diffData,
			cudnnConvolutionDescriptor_t convDesc,
			int algo,
			Pointer workSpace,
			int workSpaceSizeInBytes,
			ByReference beta,
			cudnnFilterDescriptor_t gradDesc,
			Pointer gradData);
	
	public int cudnnConvolutionBackwardData_v3(
			cudnnHandle_t handle,
			ByReference alpha,
			cudnnFilterDescriptor_t filterDesc,
			Pointer filterData,
			cudnnTensorDescriptor_t diffDesc,
			Pointer diffData,
			cudnnConvolutionDescriptor_t convDesc,
			int algo,
			Pointer workSpace,
			int workSpaceSizeInBytes,
			ByReference beta,
			cudnnTensorDescriptor_t gradDesc,
			Pointer gradData);

	public int cudnnGetConvolutionBackwardFilterWorkspaceSize(
			cudnnHandle_t handle,
			cudnnTensorDescriptor_t srcDesc,
			cudnnTensorDescriptor_t diffDesc,
			cudnnConvolutionDescriptor_t convDesc,
			cudnnFilterDescriptor_t gradDesc,
			int algo,
			IntByReference sizeInBytes);
	
	public int cudnnGetConvolutionBackwardDataWorkspaceSize(
			cudnnHandle_t handle,
			cudnnFilterDescriptor_t filterDesc,
			cudnnTensorDescriptor_t diffDesc,
			cudnnConvolutionDescriptor_t convDesc,
			cudnnTensorDescriptor_t gradDesc,
			int algo,
			IntByReference sizeInBytes);
}
